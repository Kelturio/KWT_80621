FUNCTION_BLOCK "SRTM"
TITLE = Simple runtime meter wrapper
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : 'Searinox(Gerrit_Vogtlaender)'
FAMILY : AKK
VERSION : 0.1
   VAR_INPUT 
      iClk : Bool;   // Incoming signal, the edge of which is to be queried
      iNr : UInt;   // Number of the operating hours counter
   END_VAR

   VAR 
      R_TRIG {OriginalPartName := 'R_TRIG_1200'; LibVersion := '1.0'} : R_TRIG;   // Detect positive signal edge
      F_TRIG {OriginalPartName := 'F_TRIG_1200'; LibVersion := '1.0'} : F_TRIG;   // Detect negative signal edge
      RtmMode : "RtmMode";   // Job IDs
      sMode : Byte;   // Job ID
      sPv : DInt;   // New value for the operating hours counter
      sCq : Bool;   // Status of the operating hours counter (1: running)
      sRetVal : Int;   // If an error occurs while the instruction is being executed, the return value contains an error code.
      sCv : DInt;   // Current value of the operating hours counter
   END_VAR

   VAR_TEMP 
      tRTrigQ : Bool;   // Result of positive edge evaluation
      tFTrigQ : Bool;   // Result of negative edge evaluation
   END_VAR


BEGIN
	#R_TRIG(CLK := #iClk,
	        Q => #tRTrigQ);
	#F_TRIG(CLK := #iClk,
	        Q => #tFTrigQ);
	
	IF #tRTrigQ THEN
	    #sMode := #RtmMode.START;
	ELSIF #tFTrigQ THEN
	    #sMode := #RtmMode.STOP;
	ELSE
	    #sMode := #RtmMode.FETCH;
	END_IF;
	
	#sRetVal := RTM(NR := #iNr,
	                MODE := #sMode,
	                PV := #sPv,
	                CQ => #sCq,
	                CV => #sCv);
END_FUNCTION_BLOCK

