FUNCTION_BLOCK "SRTM"
TITLE = Simple runtime meter wrapper
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : 'Searinox_(Gerrit_Vogtlaender)'
VERSION : 0.1
   VAR_INPUT 
      i_CLK : Bool;   // Incoming signal, the edge of which is to be queried
      i_NR : UInt;   // Number of the operating hours counter
   END_VAR

   VAR 
      R_TRIG_Instance {OriginalPartName := 'R_TRIG_1200'; LibVersion := '1.0'} : R_TRIG;   // Detect positive signal edge
      F_TRIG_Instance {OriginalPartName := 'F_TRIG_1200'; LibVersion := '1.0'} : F_TRIG;   // Detect negative signal edge
      RTM_MODE : "RTM_MODE";   // Job IDs
      s_MODE : Byte;   // Job ID
      s_PV : DInt;   // New value for the operating hours counter
      s_CQ : Bool;   // Status of the operating hours counter (1: running)
      s_RET_VAL : Int;   // If an error occurs while the instruction is being executed, the return value contains an error code.
   END_VAR

   VAR_TEMP 
      t_R_TRIG_Q : Bool;   // Result of positive edge evaluation
      t_F_TRIG_Q : Bool;   // Result of negative edge evaluation
      s_CV : DInt;
   END_VAR


BEGIN
	#R_TRIG_Instance(CLK := #i_CLK,
	                 Q => #t_R_TRIG_Q);
	#F_TRIG_Instance(CLK := #i_CLK,
	                 Q => #t_F_TRIG_Q);
	
	IF #t_R_TRIG_Q THEN
	    #s_MODE := #RTM_MODE.START;
	ELSIF #t_F_TRIG_Q THEN
	    #s_MODE := #RTM_MODE.STOP;
	ELSE
	    #s_MODE := #RTM_MODE.FETCH;
	END_IF;
	
	#s_RET_VAL := RTM(NR := #i_NR,
	                  MODE := #s_MODE,
	                  PV := #s_PV,
	                  CQ => #s_CQ,
	                  CV => #s_CV);
	
END_FUNCTION_BLOCK

